* Theft

  When it comes to trying to learn new things, always steal from those
  that made you learn the thing in the first place. When it comes to
  emacs, I will steal what I can from my Brother. If you would like to
  see the original, you can find it here [[https://github.com/otfrom/otfrom-org-emacs/blob/master/org/config.org][otfrom/otfrom-org-emacs]]. Most
  everything written in here are my brother's words.

* Helpers

  He created a number of helper functions that we'll need through the
  rest of this. They are incredibly useful, I recommend stealing these
  regardless if you need anything in here or not.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))
   #+END_SRC

** add-to-hooks

   A little helper function to make adding things to hooks easier.

   #+BEGIN_SRC emacs-lisp
     (defun bld/add-to-hooks (f hooks)
       "Add funcion F to all HOOKS."
       (dolist (hook hooks)
         (add-hook hook f)))
   #+END_SRC

** org-load-if-exists

   look at me adding my own helper. I want to use Babel to load other
   files into my configuration. You won't find this in the original
   repo.

   #+BEGIN_SRC emacs-lisp
     (defun org-babel-load-if-exists (file)
       (if (file-exists-p (concat user-emacs-directory file))
           (progn
             (org-babel-load-file (concat user-emacs-directory file))
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))
   #+END_SRC

* Starting

  There are some variables we'll really want to set up before
  everything gets kicked off. Usually we'd want to do this by using
  the :config key in use-package, but sometimes, I'm not smart enough
  to know how to do it.

** Backups

   Backups are handy for those times where you run out of power
   suddenly or you get a kernel panic, but it isn't fun having them
   littered around the system.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

** Enabling the disabled
*** upcase and downcase region

    I like to be able to do this. I get lots of things that come in
    SHOUTING or that need to SHOUT.

    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

*** Narrowing the region to what I want to look at

    This isn't needed quite so much now that searches, regexp and
    otherwise operate, sometimes annoyingly to an old timer like me, on
    the region rather than the whole buffer window. I still like to
    narrow down to what I'm interested in though and not every handy
    tool in emacs is quite so region oriented.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
   (setq custom-file (concat user-emacs-directory "local/custom.el"))
   (load-if-exists custom-file)
   #+END_SRC

* Version Control with magit and Diffing with ediff

   #+BEGIN_SRC emacs-lisp
     (org-babel-load-if-exists "local/version-control.org")
   #+END_SRC

* Make it pretty

   #+BEGIN_SRC emacs-lisp
     (org-babel-load-if-exists "local/visual-preferences.org")
   #+END_SRC

* Programming

  Configuring emacs is lisp coding. When He is not coding in
  emacs-lisp, he is usually coding in clojure. We both like to try to
  get nice environments for both as quickly as possible.

** Helping in all modes

   Some minor modes just help with programming everywhere.

*** company

    This is the best completion package available in emacs at the
    moment. It works with most programming modes.

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :diminish company-mode
        :init
        (setq company-dabbrev-downcase 0)
        (setq company-idle-delay 0)
        :config
        (global-company-mode))
    #+END_SRC

*** projectile

    Projectile allows you to treat gropus of files under git control
    or other build tools as projects and navigate and search them in
    easier ways.

    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :diminish projectile-mode
        :config
        (setq projectile-enable-caching t)
        (projectile-global-mode 1))
    #+END_SRC

*** tabs are evil

    They are, they just are. I spent time putting those characters in
    the right place. I don't want you to change that.

    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC

*** whitespace mode

    You never know when the evils of whitespace might be around. When
    will it catch you out?

    #+BEGIN_SRC emacs-lisp
      (use-package whitespace
        :diminish whitespace
        :init (setq whitespace-style '(face tabs trailing))
        :config (global-whitespace-mode t))
    #+END_SRC

*** flycheck

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t)
    #+END_SRC

*** file tree

    #+BEGIN_SRC emacs-lisp
    (org-babel-load-if-exists "local/tree.org")
     #+END_SRC

*** auto format

    #+BEGIN_SRC emacs-lisp
    (org-babel-load-if-exists "local/auto-format.org")
    #+END_SRC

*** undo help

    #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode))
    #+END_SRC

** Lisps

   He is a big fan of lisps. I would like to start learning, which is
   one of the reasons why I decided to steal his emacs setup.

   Below are the ways he configures various lisp modes.

*** Lisp Hooks

    There are a number of related lisp modes and we would like to make
    them behave the same (when that makes sense anyway).

    #+BEGIN_SRC emacs-lisp
      (defvar lisp-mode-hooks
        '(emacs-lisp-mode-hook lisp-mode-hook clojure-mode-hook))

      (defvar lisp-interaction-mode-hooks
        '(lisp-interaction-modes-hook cider-mode-hook cider-repl-mode-hook))
    #+END_SRC

**** Indent all the things... aggressively

     Bruce loves this mode when doing lisp stuff. It really makes it
     obvious when you don't have things balanced up and keeps your
     code tidy.

     #+BEGIN_SRC emacs-lisp
       (use-package aggressive-indent
         :ensure t
         :diminish aggressive-indent-mode
         :config (bld/add-to-hooks #'aggressive-indent-mode lisp-mode-hooks))
     #+END_SRC

**** eldoc so you know what is going on

     eldoc is another great little tip so that you can see what the
     signature is for the functions you are using.

     #+BEGIN_SRC emacs-lisp
       (use-package eldoc
         :diminish eldoc-mode
         :config (bld/add-to-hooks #'eldoc-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

**** paredit

     We *always* want our parens to match (except in text modes).

     #+BEGIN_SRC emacs-lisp
       (use-package paredit
         :ensure t
         :diminish paredit-mode
         :config (bld/add-to-hooks #'paredit-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

**** rainbow delimiters

     All of those delimeters should be pretty and give a hint as
     to where they match.

     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :ensure t
         :diminish rainbow-delimiters
         :config (bld/add-to-hooks #'rainbow-delimiters-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

**** Paren matching

     Because we really need to see where those things match.

     #+BEGIN_SRC emacs-lisp
       (use-package paren
         :config (bld/add-to-hooks #'show-paren-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

*** clojure and CIDER

    Clojure is certainly his favorite lisp on the JVM and is the one he
    uses most professionally, or at least the one he creates code in
    that he ships to other people.

    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
        :ensure t
        :defer t
        :mode (("\\.clj\\'" . clojure-mode)
               ("\\.edn\\'" . clojure-mode)))
    #+END_SRC

    CIDER is the mode that lets us connect to a REPL and evaluate code
    and do REPL Driven Development.

    #+BEGIN_SRC emacs-lisp
      (use-package cider
        :ensure t
        :defer t
        :config
        (setq cider-repl-history-file (concat user-emacs-directory "cider-history")
              cider-repl-history-size 1000
              cider-font-lock-dynamically '(macro core function var)
              cider-overlays-use-font-lock t
              cider-pprint-fn 'fipp
              cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))"))
    #+END_SRC

    clj-refactor lets us move a lot of things around and get less
    often used bits of syntax like ns declrations correct.

    #+BEGIN_SRC emacs-lisp
      (use-package clj-refactor
        :ensure t
        :defer t
        :config
        (defun my-clj-refactor-hook ()
          (message "Running cljr hook.")
          (clj-refactor-mode 1)
          (cljr-add-keybindings-with-prefix "C-c r"))
        (add-hook 'clojure-mode-hook 'my-clj-refactor-hook))
    #+END_SRC

** Scala

   Yeah, He'll have a java mode here too at some point.

   #+BEGIN_SRC emacs-lisp
     (use-package ensime
       :ensure t
       :pin melpa-stable)
   #+END_SRC

** Ops Stuff
*** Docker

    DOCKER ALL THE THINGS!!!!

    #+BEGIN_SRC emacs-lisp
      (use-package dockerfile-mode
        :ensure t)
    #+END_SRC

*** Terraform

    Highlight the syntax of those terraform files.

    #+BEGIN_SRC emacs-lisp
      (use-package terraform-mode
        :ensure t)
    #+END_SRC

** Shell Scripting

   Check those bash scripts using [[http://skybert.net/emacs/bash-linting-in-emacs/][shellcheck]].

   #+BEGIN_SRC emacs-lisp
     (add-hook 'sh-mode-hook 'flycheck-mode)
   #+END_SRC

** YAML

   So many bad things have been done with YAML. It is less verbose
   than JSON or XML, but we are not sure it is really better.

   #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :ensure t)
   #+END_SRC

** Elixir

   This one is one that I added. You will not find it in the original repo.

   #+BEGIN_SRC emacs-lisp
     (org-babel-load-if-exists "local/elixir-setup.org")
   #+END_SRC

* Text Modes
** Text Mode Basics

   If we are in a text mode we want flyspell and auto-fill-mode.

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :diminish flyspell-mode
       :config (add-hook 'text-mode-hook
                         (lambda () (flyspell-mode 1))))
   #+END_SRC

   auto-fill-mode & text-mode is a bit weird and he really has not
   found a way to make it play nicely with use-package they way he has
   done the other minor modes. So he has just gone old school here.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                 (auto-fill-mode 1)
                 (diminish auto-fill-function)))
   #+END_SRC

** unfill - the lpad of emacs lisp?

   He may regret this, but he actually wanted it for copying and pasting
   from emacs into other things that don't want lines filled nicely.

   #+BEGIN_SRC emacs-lisp
     (use-package unfill
       :ensure t)
   #+END_SRC

** Markdown

   Not everything is done in org-mode. Though he thinks it should
   be. I will be the judge of that.

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode (".md$" . gfm-mode))
   #+END_SRC

** org-mode

   This mode is so powerful,we are programming in it. :-D

*** IDs for everything
    :PROPERTIES:
    :ID:       18578255-c92e-42ab-b4e4-a687d444e87a
    :END:

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-modules 'org-id)
      (setq org-id-link-to-org-use-id t)
    #+END_SRC

*** org-gcal

    We like to have our Google Calendar events in org-mode agenda
    buffers. This isn't because he particularly like Google Calendar,
    but it is a convenient way to share schedules with our
    colleagues, friends and clients.

    #+BEGIN_SRC emacs-lisp
      (use-package org-gcal
        :ensure t)
    #+END_SRC

*** org agenda

    These are the files that we currently need to keep an up to date
    integrated agenda.

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files
            (append '("~/org/todos.org"
                      "~/org/work.org"
                      "~/org/diary.org"
                      "~/org/personal.org")
                    (mapcar 'cdr org-gcal-file-alist)))
    #+END_SRC

    And I always want to see the clock-report

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-start-with-clockreport-mode t)
    #+END_SRC

*** org agenda clock editing

    There are a lot of interesting things [[https://github.com/dfeich/org-clock-convenience][here]] about editing and
    tracking time in org-agenda files.

    #+BEGIN_SRC emacs-lisp
      (use-package org-clock-convenience
        :ensure t
        :config
        (defun dfeich/org-agenda-mode-fn ()
          (define-key org-agenda-mode-map
            (kbd "<S-up>") #'org-clock-convenience-timestamp-up)
          (define-key org-agenda-mode-map
            (kbd "<S-down>") #'org-clock-convenience-timestamp-down)
          (define-key org-agenda-mode-map
            (kbd "ø") #'org-clock-convenience-fill-gap)) ; AltGr-o
        (add-hook 'org-agenda-mode-hook #'dfeich/org-agenda-mode-fn))
    #+END_SRC

*** mailbox like rescheduling.

    mailbox is gone -- a victim of the M&A wars. We can still carry on
    with the ideas though due to the power of Free Software.

    #+BEGIN_SRC emacs-lisp
      (use-package orgbox
        :ensure t)
    #+END_SRC

*** org-journal

    When my brother is not trying to actually follow a procedure
    around using org-mode for day to day stuff, he basically follow
    the pattern [[https://github.com/bastibe/][bastibe]] talks about [[https://github.com/bastibe/org-journal][here]].

    He has tried gtd things, deft, using org-capture and refile and he
    never really stuck with any of them. The one that did work very
    well for me him the predecessor to org-mode [[https://www.emacswiki.org/emacs/PlannerMode][planner-mode]].

    #+BEGIN_SRC emacs-lisp
      (use-package org-journal
        :ensure t
        :bind (("C-c j" . org-journal-new-entry))
        :init
        (setq org-journal-dir "~/org/journal/")
        (add-to-list 'auto-mode-alist '("org/journal" . org-mode)))
    #+END_SRC

*** org-mode tweaks

    There a soooo many things to configure in org-mode. Here are some
    of the ones that are core to him.

    #+BEGIN_SRC emacs-lisp
      (eval-after-load "org"
        '(progn (setq org-log-done 'note)         ; log when we finish things
                (setq org-log-into-drawer t) ; put log into the drawer
                (setq org-default-notes-file "~/org/todos.org")
                (setq org-clock-persist 'history)
                (setq org-link-search-must-match-exact-headline nil) ;; fuzzy match headlines
                (setq org-agenda-window-setup 'current-window) ; agenda in current window
                (org-clock-persistence-insinuate) ; keep the clock history
                (require 'org-habit) ; track habits
                (appt-activate 1))) ; shout when we have appts


      (setq org-use-fast-todo-selection t)
      (setq org-todo-keywords
            '((sequence "UPCOMING(u)" "PROJECT(p)" "|" "SHIPPED(s)")
              (sequence "TODO(t)" "NEXT(n!/!)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "INACTIVE(i@/!)" "|" "CANCELLED(c@/!)" "MEETING")))

      (setq org-todo-state-tags-triggers
            '(("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("INACTIVE" ("WAITING") ("INACTIVE" . t))
              (done ("WAITING") ("INACTIVE"))
              ("TODO" ("WAITING") ("CANCELLED") ("INACTIVE"))
              ("NEXT" ("WAITING") ("CANCELLED") ("INACTIVE"))
              ("DONE" ("WAITING") ("CANCELLED") ("INACTIVE"))))


      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-c a") 'org-agenda)
    #+END_SRC

*** Custom Agenda Views

    The default agenda is a good start, but we can do a bit better.

**** What the hell is the 'Current Cake Countdown'?

     His default view, as he mostly use org for keeping his working
     days in line is around the Current Cake Countdown, which is
     what his team calls their iterations as they celebrate the end of
     each iteration with cake and don't do a lot of fast running as
     they are programmers.

     This is a composite agenda view that shows the agenda by date
     at the top and the todo list below that.

     The agenda spans one week and starts on a Wednesday (weekday 3).

     It shows the tasks we have scheduled for this week and deadlines
     in the main agenda and a sub area showing things we've not put a
     date on yet.

     We also remove items that are scheduled or with deadlines from
     the weekly agenda when they are done. This is so we can keep the
     clutter down in this view and decide on what we want our next
     step to be.

     The todo items are also filtered to only show things that have
     the Owner property set to my name.

     #+BEGIN_SRC emacs-lisp
       (add-to-list
        'org-agenda-custom-commands
        '("M" "My Current Cake Countdown"
          ((agenda "My Current Cake Countdown"
                   ((org-agenda-span 'week)
                    (org-agenda-start-on-weekday 3)
                    (org-agenda-skip-deadline-if-done t)
                    (org-agenda-skip-scheduled-if-done t)))
           (tags-todo "TODO=\"NEXT\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled NEXTs: ")))
           (tags-todo "TODO=\"TODO\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled TODOs: "))))))
     #+END_SRC

**** Yesterday-ish & Today & Tomorrow-ish

     We need to know what we were doing on the last working day and we
     would like to know what is coming up in the next working day.

     So let's define a function that will give us this range of
     days. We should expand this so that it can deal with things like
     bank holidays.

     #+BEGIN_SRC emacs-lisp
       (defun ytt-agenda-range (day-of-week)
         (pcase day-of-week
           (0 '("-2d" 4)) ;; On Sunday Show Friday to Monday
           (1 '("-3d" 6)) ;; On Monday Show Friday to Tuesday
           (2 '("-1d" 3)) ;; On Tuesday Show Monday to Wednesday
           (3 '("-1d" 3)) ;; On Wednesday Show Tuesday to Thursday
           (4 '("-1d" 3)) ;; On Thursday Show Wednesday to Friday
           (5 '("-1d" 5)) ;; On Friday Show Thursday to Monday
           (6 '("-1d" 4)) ;; On Saturday Show Friday to Monday
           ))

       (defun ytt-start-day (day-of-week)
         (car (ytt-agenda-range day-of-week)))

       (defun ytt-span (day-of-week)
         (cadr (ytt-agenda-range day-of-week)))
     #+END_SRC

     And then let's use it in the agenda here:

     #+BEGIN_SRC emacs-lisp
       ;;(setq org-stuck-projects '("TODO=\"PROJECT\"+CATEGORY=\"work\"" ("NEXT") nil ""))
       (setq org-stuck-projects '("TODO=\"PROJECT\"" ("NEXT") nil ""))
       (add-to-list
        'org-agenda-custom-commands
        '("y" "Yesterday-ish, Today and Tomorrow-ish"
          ((agenda "Today"
                   ((org-agenda-span 0)
                    (org-agenda-start-day "+0d")
                    (org-agenda-skip-deadline-if-done 't)
                    (org-agenda-sorting-strategy '(habit-up time-up scheduled-up deadline-up category-down todo-state-down tag-up))))
           (tags-todo "TODO=\"NEXT\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled NEXTs: ")))
           (tags-todo "TODO=\"WAITING\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Blocked: ")))
           (tags-todo "kaylee"
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled Kaylee Tasks")))
           (stuck "CATEGORY=\"work\""
                  ((org-agenda-overriding-header "Stuck Work Projects: ")))
           (tags-todo "TODO=\"PROJECT\"+CATEGORY=\"work\""
                      ((org-agenda-overriding-header "Active Work Projects: ")))
           (tags-todo "TODO=\"PROJECT\"+CATEGORY=\"personal\""
                      ((org-agenda-overriding-header "Personal Projects: ")))
           (agenda "Yesterday-ish, Today and Tomorrow-ish"
                   ((org-agenda-span (ytt-span (calendar-day-of-week (calendar-current-date))))
                    (org-agenda-start-day (ytt-start-day (calendar-day-of-week (calendar-current-date))))))
           (tags-todo "TODO=\"TODO\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled TODOs: "))))))
     #+END_SRC

**** Last & Upcoming
     :PROPERTIES:
     :ID:       d6ec9e41-21ec-455c-821b-33817da5304f
     :END:

     We need to know what we were doing on the last working day and we
     would like to know what is coming up in the next 7 days.

     #+BEGIN_SRC emacs-lisp
       (defun yt-agenda-range (day-of-week)
         (pcase day-of-week
           (0 '("-2d" 3)) ;; On Sunday Show Friday to Sunday
           (1 '("-3d" 5)) ;; On Monday Show Friday to Monday
           (2 '("-1d" 2)) ;; On Tuesday Show Monday to Tuesday
           (3 '("-1d" 2)) ;; On Wednesday Show Tuesday to Wednesday
           (4 '("-1d" 2)) ;; On Thursday Show Wednesday to Thursday
           (5 '("-1d" 2)) ;; On Friday Show Thursday to Friday
           (6 '("-1d" 2)) ;; On Saturday Show Friday to Saturday
           ))

       (defun yt-start-day (day-of-week)
         (car (yt-agenda-range day-of-week)))

       (defun yt-span (day-of-week)
         (cadr (yt-agenda-range day-of-week)))


       (add-to-list
        'org-agenda-custom-commands
        '("U" "Yesterday-ish and Today"
          ((agenda "Last and Upcoming"
                   ((org-agenda-span (ytt-span (calendar-day-of-week (calendar-current-date))))
                    (org-agenda-start-day (ytt-start-day (calendar-day-of-week (calendar-current-date))))))
           (tags-todo "TODO=\"NEXT\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled NEXTs: ")))
           (tags-todo "TODO=\"WAITING\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Blocked: ")))
           (stuck "CATEGORY=\"work\""
                  ((org-agenda-overriding-header "Stuck Work Projects: ")))
           (tags-todo "TODO=\"PROJECT\"+CATEGORY=\"work\""
                      ((org-agenda-overriding-header "Active Work Projects: ")))
           (tags-todo "TODO=\"PROJECT\"+CATEGORY=\"personal\""
                      ((org-agenda-overriding-header "Personal Projects: ")))
           (tags-todo "TODO=\"TODO\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled TODOs: "))))))
     #+END_SRC

**** Pomodoro in agenda

     Something to keep us focused and take breaks when we are focused
     (so we don't die from sitting in one place for too long).

     #+BEGIN_SRC emacs-lisp
       (use-package org-pomodoro
         :ensure t
         :config
         (add-hook 'org-agenda-mode-hook
                   (lambda () (local-set-key (kbd "P") 'org-pomodoro))))
     #+END_SRC

*** Capturing & Refiling

    His thinking at the moment is that he'll take day notes in
    org-journal, have a wiki like thing in other org files and
    interleave (and use org links to keep them all together under his
    org-directory) and have a todos.org file which will have all his
    other todo goodies which he can capture from other files, pivotal
    tracker stuff or from the journal itself which should make it so
    his todos always point back to where they initially came from.

    We'll see if it works for now.

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("t" "To do"
               entry (file+datetree org-default-notes-file)
               "* TODO %?\n%^{Owner}p\n%U\n%a\n"
               :empty-lines-before 1)
              ("w" "To do from the web"
               entry (file+datetree org-default-notes-file)
               "* TODO %?\n%^{Owner}p\n%U\n%(org-cliplink-capture)\n"
               :empty-lines-before 1)
              ("n" "Doing RIGHT NOW"
               entry (file+datetree org-default-notes-file)
               "* NEXT %?\n%^{Owner}p\n%U\n%a\n"
               :clock-in t :clock-resume t
               :empty-lines-before 1)
              ("k" "Kaylee Checks"
               entry (file+datetree org-default-notes-file)
               "* NEXT Kaylee Checks\n%^{Owner}p\n%U\n%a\n%?%[~/org/kaylee-template.org]"
               :clock-in t :clock-resume t
               :empty-lines-before 1)
              ("r" "Running commentary"
               entry (clock)
               "* %?\n%U\n%a\n"
               :clock-keep t
               :empty-lines-before 1)
              ("m" "Meeting"
               entry (file+datetree org-default-notes-file)
               "* MEETING with %? :MEETING:\n%T\n%a"
               :clock-in t :clock-resume t
               :empty-lines-before 1)
              ("d" "Diary"
               entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n"
               :clock-in t :clock-resume t
               :empty-lines-before 1)
              ("i" "Idea"
               entry (file org-default-notes-file)
               "* %? :IDEA: \n%t"
               :clock-in t :clock-resume t
               :empty-lines-before 1)
              ("c" "Contacts"
               entry (file "~/org/contacts.org")
               "* %(org-contacts-template-name)\n:PROPERTIES:\n:EMAIL: %(org-contacts-template-email)\n:PHONE:\n:ALIAS:\n:NICKNAME:\n:IGNORE:\n:ICON:\n:NOTE:\n:ADDRESS:\n:BIRTHDAY:\n:LAST_READ_MAIL:\n:END:"
               :empty-lines-before 1)
              ("l"
               "Capture a link"
               entry
               (file+datetree "~/org/links.org")
               "* %(org-cliplink-capture) %^g\n%?"
               :empty-lines-before 1)))
    #+END_SRC

**** Refiling

     He has never really been terribly happy with how this works. This
     might be a reasonable start though.

     #+BEGIN_SRC emacs-lisp
       (setq org-refile-allow-creating-parent-nodes t)

       (setq org-refile-targets
             '(("work.org" :maxlevel . 9)
               ("personal.org" :maxlevel . 9)))
       (setq org-refile-use-outline-path t)

       (setq org-link-search-must-match-exact-headline nil)
     #+END_SRC

*** Interleave

    Could this be the best way to take notes on pdfs?

    #+BEGIN_SRC emacs-lisp
      (use-package interleave
        :ensure t
        :config (setq interleave-org-notes-dir-list '("~/org/interleave" ".")))
    #+END_SRC

*** clipboard URLs to org-mode

    He's a real pack rat when it comes to book marking things. He has
    always wanted to have them integrated with everything else and
    under his control. he's hoping that org-cliplink will help with
    that.

    #+BEGIN_SRC emacs-lisp
      (use-package org-cliplink
        :ensure t)
    #+END_SRC

*** org pinboard like thing

    We want to archive those pages. Who knows, we might want to do some
    text analysis on them.

    #+BEGIN_SRC emacs-lisp
      (use-package org-board
        :ensure t)
    #+END_SRC

*** Preview org-mode pages as html

    We are hoping this will be handy for copying and pasting org-mode
    stuff into emails and google docs for sharing with unbelievers.

    #+BEGIN_SRC emacs-lisp
      (use-package org-preview-html
        :ensure t)
    #+END_SRC

*** org-babel

    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((shell . t)))
    #+END_SRC

** html, css, sass, scss and others
*** emmet

    #+BEGIN_SRC emacs-lisp
    (use-package emmet-mode
    :ensure t)
    #+END_SRC

*** rainbow-mode

    I want to see what those colours look like right in the buffer.

    #+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
    :ensure t)
    #+END_SRC

*** tagedit

    I miss paredit when working in sgml languages. Let's fix that.

    #+BEGIN_SRC emacs-lisp
      (use-package tagedit
        :ensure t
        :commands tagedit-mode
        :config
        (tagedit-add-paredit-like-keybindings)

        (add-hook 'sgml-mode-hook 'tagedit-mode)
        (add-hook 'html-mode-hook 'tagedit-mode))
    #+END_SRC

*** scss

    Some of my projects depend on scss and sass.

    #+BEGIN_SRC emacs-lisp
      (use-package scss-mode
        :ensure t)
    #+END_SRC

* Other Modes
** ido and smex

   I just want to use this everywhere. I've tried using helm before
   for a similar purpose and while it is really good I found it a bit
   too intrusive. This might be because I am interface damaged from
   years of using emacs, but this is my config if you want to go wild
   with helm, then create your own. ;-)

   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :bind (("M-x" . smex))
       :config (smex-initialize))  ; smart meta-x (use IDO in minibuffer)

     (use-package ido
       :ensure t
       :demand t
       :bind (("C-x b" . ido-switch-buffer))
       :config (ido-mode 1)
       (setq ido-create-new-buffer 'always  ; don't confirm when creating new buffers
             ido-enable-flex-matching t     ; fuzzy matching
             ido-everywhere t  ; tbd
             ido-case-fold t)) ; ignore case

     (use-package ido-completing-read+
       :ensure t
       :config (ido-ubiquitous-mode 1))

     (use-package flx-ido
       :ensure t
       :config (flx-ido-mode 1))

     (use-package ido-vertical-mode
       :ensure t
       :config (ido-vertical-mode 1))
   #+END_SRC

** ibuffer

   I've never used ibuffer much before, but many people swear by it
   (rather than at it). I've tried it now and it looks good. So let's
   rebind C-x C-b.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

*** Moving windows and buffers

    I like to be able to move windows and buffers around quickly and
    for the keys to be quite similar.

    #+BEGIN_SRC emacs-lisp
      (use-package buffer-move
        :ensure t
        :bind (([M-s-up] . buf-move-up)
               ([M-s-down] . buf-move-down)
               ([M-s-right] . buf-move-right)
               ([M-s-left] . buf-move-left)
               ([s-up] . windmove-up)
               ([s-down] . windmove-down)
               ([s-right] . windmove-right)
               ([s-left] . windmove-left)))
    #+END_SRC

** yasnippet

   Yet another snippet package, but this one is pretty good so we'll
   use it.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :config (yas-global-mode 1))
   #+END_SRC

** password store

   As said in the header of the mode:

   "This package provides functions for working with pass ("the
   standard Unix password manager")."


   #+BEGIN_SRC emacs-lisp
     (use-package password-store
       :ensure t)
   #+END_SRC

*** And pass to browse it all

    #+BEGIN_SRC emacs-lisp
      (use-package pass
        :ensure t)
    #+END_SRC

** irc/slack and erc stuff

   erc can be used for irc and as a slack client. It needs a few
   things to make it a bit nicer even though it is actually pretty
   good out of the box.

   #+BEGIN_SRC emacs-lisp
     (use-package erc-colorize
       :ensure t
       :defer t
       :config (erc-colorize-mode 1))
   #+END_SRC

** pivotal tracker

   I've tried managing the whole team using org-mode. Even when there
   were only 4 of us and 3 of us were regular emacs users it didn't
   work. It was a lovely idea and I'll give something similar another
   crack.

   For now, we've gone full hipster with [[http://pivotaltracker.com][Pivotal Tracker]].

   #+BEGIN_SRC emacs-lisp
     (use-package pivotal-tracker
       :ensure t)
   #+END_SRC

** Emojis

   Just the unicode and github ones really. I like the ascii ones as
   they are :-) .

   #+BEGIN_SRC emacs-lisp
     (use-package emojify
       :ensure t
       :defer t
       :init (add-hook 'after-init-hook #'global-emojify-mode))
   #+END_SRC

** What is the weather?

   This probably falls under "more stupid emacs tricks", but who
   wouldn't want to to see the weather in emacs?

   #+BEGIN_SRC emacs-lisp
     (use-package wttrin
       :ensure t
       :commands (wttrin)
       :init
       (setq wttrin-default-cities '("Chicago")
             wttrin-default-accept-language '("Accept-Language" . "en-US")))
   #+END_SRC

** The Great Eye of Sauron

   #+BEGIN_SRC emacs-lisp
     (use-package sauron
       :ensure t)
   #+END_SRC

** expand-region

   Looks like a cool way to expand what it is that you want to
   select.

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region)))
   #+END_SRC
